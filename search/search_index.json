{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overpass for UNSW","text":""},{"location":"#a-simple-discord-verification-bot-that-doesnt-involve-trusting-strangers-with-your-password","title":"&gt; A simple Discord verification bot that doesn't involve trusting strangers with your password.","text":"<ul> <li>TOC {:toc}</li> </ul> <p>Emails may be flagged as spam by UNSW. This is not expected behaviour. Please ask new registrants to mark the emails as not spam.</p> <p>Emails will only ever come from overpass@automailer.unsw.bot as of July 28th 2025. The old email account is now disabled and will not send emails.</p>"},{"location":"#what-is-this","title":"What is this?","text":"<p>Overpass is an Arc-approved Discord bot designed to verify that a student is who they say they are. It relies on some simple principles:</p> <ol> <li>A student's zID is unique,</li> <li>The person who owns a specific zID also has access to the email <code>zID@ad.unsw.edu.au</code>,</li> <li>No-one else has access to that zID's email inbox,</li> <li>You don't (and shouldn't) trust strangers with your password.</li> </ol>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<ol> <li>A server admin (usually a society exec or course convenor) sets up the bot in their server</li> <li>Someone joins the server</li> <li>The bot assigns them an \"Unverified\" role, stopping them from accessing anything but the <code>#verify</code> channel</li> <li>They click the button in the channel and receive a DM from the bot</li> <li>They give the bot their UNSW email (either zID@ad.unsw.edu.au)</li> <li>The bot sends them an email with a 6 digit code</li> <li>They reply to the bot with the code from their email</li> <li>The bot assigns them a \"Verified\" role in the discord server, and posts their zID in a channel that's only accessible to the server admins.</li> </ol>"},{"location":"#what-makes-this-different-from-drawbridge","title":"What makes this different from Drawbridge?","text":"<p>Drawbridge is the Arc-approved version of this bot, developed by Tom (a former CSESoc exec/CSE Course Convenor) and maintained by Dylan from CSE. However, I consider Drawbridge to have a major design flaw:</p> <p>\"Your zPass will not be stored. I don't want your zPass, I like my own one.\"</p> <p>Unfortunately, Drawbridge is currently closed-source, meaning no-one can actually verify that your password isn't being stored by the operators. Additionally, your password is sent in plaintext to the server. I've written a more technical explanation of Why That's Bad (ironically, based on stuff I learned in a CSE course) further down the page for those who are more technically inclined.</p> <p>Even if you don't trust me, the worst case is that I know your zID and what UNSW Discord servers you've joined. Unlike Drawbridge, Overpass never has a risk of giving me, server admins, the bot or any webpage your password, making it (at least to me) significantly safer to use. However, it still successfully performs the task of logging a student's zID for the admins of a discord server, which is the entire purpose of both bots.</p> <p>Additionally, a student wanting to remove their data is as simple as asking the server admins to run the <code>/delete_user_data</code> command for their Discord username.</p> <p>If you're extra paranoid, you might think that I'm running a different version of the code on the actual bot than what's published on Github. Even in that case though, you can still just... run it yourself from the public repository. It's not that difficult, if you've learned enough about cybersecurity to consider that as a threat model, you definitely know how to self-host a NodeJS project.</p>"},{"location":"#im-a-server-admin-how-do-i-set-it-up","title":"I'm a server admin. How do I set it up?","text":"<p>Here's some basically copy-paste instructions. I've assumed you're familiar with the basics of setting up a Discord server, but if you're having trouble, feel free to send me a DM on Discord.</p> <ol> <li>Create 2 new channels on your server - I'd recommend calling them <code>#verify</code> and <code>#registration-logs</code> or similar.</li> <li>Create 2 new roles - I'd call them <code>Verified</code> and <code>Unverified</code>.</li> <li>Set the permissions for the roles as follows:</li> <li><code>Unverified</code> should have all permissions disabled for every channel except <code>#verify</code></li> <li><code>Verified</code> should have all permissions disabled for the channel <code>#verify</code></li> <li><code>#registration-logs</code> should be set up to only be visible to moderators. You can use the \"Private Channels\" function for this.</li> <li>Invite the bot to your server.</li> <li>Run all of the following commands:</li> </ol> Command (I would copy-paste this) Expected response from the bot Notes <code>/unverifiedrole @Unverified</code> \"Unverified role changed to unverified\" Substitute <code>@Unverified</code> for your Unverified user role <code>/verifiedrole @Verified</code> \"Verified role changed to verified\" Substitute <code>@Verified</code> for your Verified user role <code>/add_unverified_on_join True</code> \"Enabled auto add unverified role!\" [For UNSW staff-run servers or any other case where Arc wouldn't need access]<code>/domains unsw.edu.au,ad.unsw.edu.au</code> \"Added @unsw.edu.au,@ad.unsw.edu.au\" MAKE SURE THIS IS EXACTLY THE SAME AND THAT BOTH DOMAINS ARE INCLUDED IN THE BOT'S REPLY. DO NOT ADD <code>student.unsw.edu.au</code> [For clubs/servers where Arc staff need access]<code>/domains unsw.edu.au,ad.unsw.edu.au,arc.unsw.edu.au</code> \"Added @unsw.edu.au,@arc.unsw.edu.au,@ad.unsw.edu.au\" MAKE SURE THIS IS EXACTLY THE SAME AND THAT ALL 3 DOMAINS ARE INCLUDED. DO NOT ADD <code>student.unsw.edu.au</code> <code>/set_log_channel #registration-logs</code> \"Modified log channel\" Substitute <code>#registration-logs</code> for your zID log channel. MAKE SURE THIS IS ONLY ACCESSIBLE TO MODERATORS. <code>/verifymessage This Discord server is operated by &lt;SOCIETY&gt;. By registering, you agree to comply with the server's rules, as well as the UNSW Code of Conduct. Please enter your UNSW email address (usually z1234567@ad.unsw.edu.au). You will get a 6 digit code emailed to your UNSW email within the next few minutes, please send that code as a DM reply to this bot. **If you do not see the email, please check your spam folder.**</code> \"Modified verify message\" Add any legal text you need to the message, and replace <code>&lt;SOCIETY&gt;</code> with whatever group is responsible for the server. <ol> <li>Copy-paste your server rules into <code>#verify</code>.</li> <li>Make sure only moderators have the \"Send Messages\" Permission for <code>#verify</code>.</li> <li>Run the <code>/button</code> command with the parameters below:</li> </ol> Channel Button Text Message <code>#verify</code> Click here to verify This bot will verify your zID. Go to https://overpass.unsw.bot for more information on how it works. <p>\u200b       It should respond \"Button created\", and you should see the following message in the <code>#verify</code> channel:</p> <p></p> <ol> <li>Run <code>/status</code> to confirm that you've set the bot up properly. If there are any unexpected differences from the following screenshot, you might have dome something wrong.</li> </ol> <p></p> <ol> <li>[OPTIONAL] Run <code>/verify</code> and verify yourself to test that it works with your account before sharing the server with students/members.</li> <li>Done! You should be good to share the server with new members and have them verify when they join.</li> </ol>"},{"location":"#common-tasks","title":"Common tasks","text":""},{"location":"#i-need-to-remove-a-students-data-from-my-server","title":"I need to remove a student's data from my server","text":"<p>All you need to do is find their discord username in <code>#verification-logs</code> and delete the corresponding message from the bot!</p>"},{"location":"#i-need-to-ban-a-zid-from-my-server","title":"I need to ban a zID from my server","text":"<p>Run <code>/blacklist zID@unsw.edu.au, zID@ad.unsw.edu.au</code>.</p>"},{"location":"#i-want-to-addremove-a-domain","title":"I want to add/remove a domain","text":"<p>Simply run <code>/domains domain.tld</code> for each new domain, or <code>/removedomains domain.tld</code> for each domain you want to remove.</p> <p>I'd recommend running <code>/domains</code> after either of those commands to make sure the new list is correct for your server.</p>"},{"location":"#i-want-to-remove-the-bot-entirely","title":"I want to remove the bot entirely","text":"<p>Run <code>/delete_server_data</code>. The bot will nuke itself and disconnect from your server (you'll have to do all the setup again if you want to re-add it).</p>"},{"location":"#i-want-to-allow-non-unsw-students-to-access-my-server","title":"I want to allow non-UNSW students to access my server","text":"<p>If you want to add a specific uni, run <code>/domains students.university.edu.au</code>, replacing the domain as necessary.</p> <p>Some common unis you might want are listed below:</p> University Students Staff Clubs Management USYD uni.sydney.edu.au sydney.edu.au usu.edu.au UTS student.uts.edu.au uts.edu.au activateuts.com.au WSU student.westernsydney.edu.au westernsydney.edu.au ??? MQ students.mq.edu.au mq.edu.au Same as staff <p>If you want to allow anyone (including members of the general public) to join, run <code>/domains *.*</code>.</p>"},{"location":"#i-need-help-with-some-other-task","title":"I need help with some other task","text":"<p>If <code>/help</code> doesn't give you the information you need, DM me on Discord. Note that I'm only specifically testing this code for UNSW (since that's the only place where I have an email and student number). If you go to another uni, there may be a limit to how much I can help you.</p>"},{"location":"#i-want-to-give-you-money","title":"I want to give you money","text":"<p>If you want to fund this project, support the upstream maintainer instead, as I rely on his code to keep this bot running. I promise I don't need or want your money.</p> <p>If you want to give it to me anyway, I instead ask that you make a contribution to the independent student paper Noise, which I've spent a significant amount of effort writing both code and articles for.</p> <p>Legal Technical Contributors</p>"},{"location":"commands/","title":"Commands","text":"<p>The following commands can be used by any user.</p> Commands Arguments Usage <code>/verify</code> verify on the server <code>/delete_user_data</code> delete all the data from the user <p>The following commands can only be used by an administrator</p> Commands Arguments Usage <code>/help</code> get instructions on how to use the bot <code>/status</code> - returns whether the bot is properly configured or not <code>/domains</code> (domain name) () -&gt; returns registered domains(domain name) -&gt; register given domain <code>/removedomain</code> domain name remove registered domain <code>/button</code> channel,message, buttontext creates a button in the channel with the message and button text <code>/message</code> channel,message sends a message to the channel to which the user can add a reaction to start the verification process <code>/verifymessage</code> (message) () -&gt; resets to default verify message  (message) -&gt; set custom verify message <code>/verifiedrole</code> (verified role name) () -&gt; returns the name of the verified role  (verified role name) -&gt; set the role name for the verified role <code>/unverifiedrole</code> (unverified role name) () -&gt; returns the name of the unverified role  (unverified rolename) -&gt; set the role name for the unverified role  (current unverified rolename) -&gt; deactivates unverified role <code>/language</code> language set language for the user interactions <code>/add_unverified_on_join</code> enable (enable/disable) -&gt; automatically adds the unverified role to every new user <code>/verify_on_join</code> enable (enable/disable) -&gt; automatically asks every new member to verify <code>/delete_server_data</code> delete all the data from the server <code>/set_log_channel</code> (logchannel) () -&gt; disable log channel  (log channel) -&gt; set log channel <code>/blacklist</code> (emails) () -&gt; returns a comma-separated list of emails that are blocked from being verified  (emails) -&gt; set a comma-separated list of emails that are blocked from being verified <p>react := react to the message with an emoji</p> <p>The unverified role can be used to make a channel visible in which the message is located</p> <p>The EmailBot role has to be higher in the role hierarchy then the verified and unverified role else -&gt; <code>Cant find roles. Please contact the admin!</code> error</p> <p></p>"},{"location":"contributing/","title":"Contributors","text":""},{"location":"contributing/#developer","title":"Developer","text":"<ul> <li>Lars Kaesberg (EmailVerify)</li> <li>Pepsi (Overpass Fork)</li> </ul>"},{"location":"contributing/#translation","title":"Translation","text":"<ul> <li>Lars Kaesberg (English, German)</li> <li>gus2131 (Spanish)</li> <li>kploskonka (Polish)</li> <li>Norma1Name (Hebrew)</li> <li>iplayagain (Korean)</li> </ul> <p>To add more languages please create an issue with the translation file. Template</p>"},{"location":"legal/","title":"Legal","text":"<p>The Terms of Service and Privacy Policy for the Overpass Discord bot.</p>"},{"location":"legal/#terms-of-service","title":"Terms of Service","text":""},{"location":"legal/#usage-agreement","title":"Usage Agreement","text":"<p>You accept the following Terms of Service and Privacy Policy by inviting the Bot to your server.</p> <p>The privilege of using and inviting this bot can be revoked for any server or user if the Terms of Service or Privacy Policy of this Bot or the Terms of Service, Privacy Policy or Community Guidlines of Discord gets violated.</p> <p>The bot is allowed to collect data as described in Privacy Policy.</p>"},{"location":"legal/#intended-age","title":"Intended Age","text":"<p>Users under the minimal age of Discord's Terms of Service are not allowed to use this bot.</p>"},{"location":"legal/#affiliation","title":"Affiliation","text":"<p>This Bot is not affiliated with, supported or made by Discord.</p> <p>This bot is also not affiliated or maintained by Arc, UNSW, or any societies who may be using it unless specified otherwise.</p>"},{"location":"legal/#liability","title":"Liability","text":"<p>Breaking these Terms of Service won't make the owner of the bot liable.</p> <p>These terms can be updated at any time by the owner of the bot. Any user can opt out of these new terms by removing the Bot from its own servers.</p>"},{"location":"legal/#contact","title":"Contact","text":"<p>Email: Send Email</p>"},{"location":"legal/#privacy-policy","title":"Privacy Policy","text":""},{"location":"legal/#data-usage","title":"Data Usage","text":"<p>The bot uses the stored data to verify that no emails get used multiple times. Everything else is settings data for individual servers.</p> <p>The data is only used by the bot and won't be shared with any 3rd party services.</p>"},{"location":"legal/#stored-information","title":"Stored Information","text":"<p>Following data gets stored from the bot:</p>"},{"location":"legal/#server","title":"Server","text":"<ul> <li><code>id</code> server id</li> <li><code>domains</code> verified domains</li> <li><code>verifiedrole</code> role for verified users</li> <li><code>unverifiedrole</code> role for unverified users</li> <li><code>channelid</code> reference to the channel with the verify message</li> <li><code>messageid</code> reference to the verify message</li> <li><code>language</code> language setting for the server</li> <li><code>autoVerify</code> automatically verify when joining a server</li> <li><code>autoAddUnverified</code> automatically add the unverified role to every new member of the server</li> <li><code>verifyMessage</code> message to show to the user when verifying</li> <li><code>logChannel</code> channel to log the emails of verified users</li> <li><code>blacklist</code> list of emails that are blocked from being verified</li> </ul>"},{"location":"legal/#user","title":"User","text":"<ul> <li><code>userid</code> user id</li> <li><code>email</code> an MD5 hashed version of the email address</li> <li><code>guildid</code> server id</li> </ul>"},{"location":"legal/#removal-of-data","title":"Removal of Data","text":""},{"location":"legal/#server_1","title":"Server","text":"<p>The admin can remove the server and all the user data by using <code>/delete_server_data</code></p> <p>When the bot gets removed from the server all the data is removed automatically.</p>"},{"location":"legal/#user_1","title":"User","text":"<p>The user can remove their own data by using <code>/delete_user_data</code></p>"},{"location":"legal/#warranty","title":"Warranty","text":"<p>No warranty (whether express or implied) or support is provided by the developers of this code, except on a voluntary basis. No expectation of performance, except of the nature described in the technical documentation, should be expected.</p>"},{"location":"technical/","title":"Technical","text":""},{"location":"technical/#foreword","title":"Foreword","text":"<p>I am not a Computer Science or Software Engineering graduate. Almost all of this is either my opinion, or based on my experience doing code review and development for self-hosted community projects.</p> <p>I have intentionally taken a stance known as \"zero trust\" throughout this page. Zero trust ideology is an increasingly common practice in cybersecurity, where developers design with the assumption that every other part of the codebase is compromised other than the current stage, and users assume that the developer is malicious. For example, a user should assume that a password input box is saving your passwords and sending them to a malicious database, and the web developer should assume that the server has been hacked somehow and is sending all password data to some random.</p> <p>You may disagree with this model, and that's fine. This is entirely my opinion.</p>"},{"location":"technical/#introduction","title":"Introduction","text":"<p>Overpass is my fork of Lars Kaesberg's EmailVerify bot, with minor instance-specific tweaks to be better suited for UNSW usage. All major changes are upstreamed where they align with the original bot's purpose, because contributing to open source projects is good for the world of software development.</p> <p>I have stripped out unnecessary functionality from the fork, as this represents a potential attack vector which is unnecessary for the use-case. I've also added an S/MIME integration with Actalis certificates to verify that the code is not being MITM'd.</p> <p>If you need a general purpose version of the bot, or want to host your own, I'd recommend just using Lars' version.</p> <p>I am usually running slightly behind the current version of the upstream code, in order to ensure that compatibility with any changes I make. However, I am aiming to be mostly interoperable with Lars' version. You can see the version I'm using on GitHub.</p>"},{"location":"technical/#the-issue-with-drawbridge","title":"The issue with Drawbridge","text":"<p>The real problem with Drawbridge is what happens after you click the \"Submit\" button:</p> <p></p> <p>If you're not familiar with HTTP requests, this might not mean much to you. The problem is that my zID and zPass are being transmitted as plaintext from my device to the CSE server, which then (I'm assuming) checks it against UNSW's Active Directory instance (meaning it's likely making a second plaintext request over the internet with my password, since UNSW's Active Directory is hosted on Microsoft's servers, and Drawbridge is hosted on on-campus servers).</p> <p>Yes, the site is using HTTPS, but that honestly doesn't mean much. Do you remember seeing this prompt the first time you connected to uni wifi? </p> <p></p> <p>The MacOS version explains it a little better, but essentially what that certificate means is that UNSW has the ability to make fake TLS certificates for any website you access while on university-owned networks (this is known as a \"Certificate Authority\"). There have been several high-profile credential attacks which use this same technique on public networks (think shopping center free wifi) to steal people's login credentials.</p> <p>Even if you don't care about your UNSW account, are you sure that no other accounts use the same password? Because they're all vulnerable too. Also consider the fact that access to your UNSW account means access to your full name, home address, phone number, and (if you're using HECS/SA-HELP) your tax file number. 2FA somewhat mitigates this risk, but Microsoft's proprietary 2FA has been previously susceptible to this exact same attack vector.</p> <p>The best way of dealing with passwords is to not deal with them at all. The second best way is to encrypt them on-device before making the HTTP request (usually through hashing), ensuring that your server (and any snoopy middle-men) don't have any chance of seeing your plaintext password. This still has vulnerabilities, such as rainbow table and replay attacks, but it makes it significantly harder to do so.</p> <p>Here's a scenario:</p> <p>Your ex (another UNSW student) is bitter about your breakup and wants to get back at you. They MITM your password from your attempt to link your zID to a new society server using Drawbridge, link their own burner discord account to your student ID, log into campus wifi with your details, and then spams racial slurs in Discord servers until your zID gets reported to Conduct and Integrity.</p> <p>Far-fetched? Yes, but not impossible, and actually quite feasible (we tested everything except the racial slurs on a consenting student's account successfully).</p>"},{"location":"technical/#what-about-client-side-hashing","title":"What about client-side hashing?","text":"<p>Hashing is the industry standard technique for making the \"real\" contents of something unreadable but uniquely identifiable. Think of a hash as a serial number for your password. It uniquely identifies that password, but doesn't tell you what it actually is.</p> <p>The point of client-side hashing is to eliminate the \"malicious server\" attack vector, where the server is collecting your form submissions and storing the passwords. Hashing means that the server's owner can't see what your actual password is.</p> <p>While it does protect users from the threat of their passwords being leaked and then used to log into other platforms, client-side hashing doesn't resolve the crazy ex scenario mentioned before.</p> <p>Additionally, I don't think there's a reliable method of using client-side hashing with an Active Directory backend, and unless the bot devs are able to convince Microsoft to change the way that their platform works, the method that Drawbridge seems to use (LDAP authentication) is incompatible with client-side hashing.</p> <p>For those who are curious, I believe that the correct way to do password authentication (if you insist on doing it) is double hashing: once on the client side, and then a second time (with a salt) on the server side. Also MFA, please.</p>"},{"location":"technical/#what-other-authentication-methods-could-they-have-used","title":"What other authentication methods could they have used?","text":"<p>You've probably already seen the best one: Single Sign-On. </p> <p>You know that popup that sends you to Microsoft's login page when you open Moodle/myUNSW? By letting Microsoft handle the entire authentication process (using OIDC), you're not relying on one developer to get password management right.</p> <p>Microsoft has much more to lose than Arc does if they have a security hole that gives away your password. Additionally, they have legal requirements which force them to disclose a password database leak if you get caught up in one. Arc, UNSW, and CSE have no such requirement.</p>"}]}